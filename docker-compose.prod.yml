# Production Docker Compose for Ecotouch
version: '3.8'

services:
  # =============================================================================
  # BACKEND API SERVICE
  # =============================================================================
  ecotouch-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: ecotouch-backend-prod
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - .env.production
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ecotouch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  ecotouch-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: ecotouch-frontend-prod
    ports:
      - "80:80"
    depends_on:
      - ecotouch-backend
    networks:
      - ecotouch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # DATABASE SERVICE
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: ecotouch-postgres-prod
    environment:
      POSTGRES_DB: ecotouch_prod
      POSTGRES_USER: ecotouch_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backend/src/config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./scripts/backup.sh:/usr/local/bin/backup:ro
    networks:
      - ecotouch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecotouch_user -d ecotouch_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # =============================================================================
  # CACHE SERVICE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: ecotouch-redis-prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    networks:
      - ecotouch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # REVERSE PROXY (Optional - for production deployment)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: ecotouch-nginx-prod
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - ecotouch-frontend
      - ecotouch-backend
    networks:
      - ecotouch-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # MONITORING SERVICE (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: ecotouch-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecotouch-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ecotouch-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - ecotouch-network
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  ecotouch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
